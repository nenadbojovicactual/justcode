using Microsoft.Extensions.Logging;
using ServiceStack.Text;
using System.Text;
using WebApplication1.Controllers;
using static System.Net.WebRequestMethods;

namespace WebApplication1
{
    public class CreateSession
    {
        private readonly RequestDelegate _next;
        private readonly ILoggerFactory logger;

        public CreateSession(RequestDelegate next, ILoggerFactory logger)
        {
            this._next = next;
            this.logger = logger;
        }

        public async Task Invoke(HttpContext httpContext)
        {
            var request = httpContext.Request;

            request.EnableBuffering();
            var buffer = new byte[Convert.ToInt32(request.ContentLength)];
            await request.Body.ReadAsync(buffer, 0, buffer.Length);
            //get body string here...
            var requestContent = Encoding.UTF8.GetString(buffer);

            request.Body.Position = 0;  //rewinding the stream to 0
            var log = logger.CreateLogger<WeatherForecastController>();
           
            await _next(httpContext);
            log.LogInformation($"{AppDomain.CurrentDomain.FriendlyName} Endpoint: {request.Path} - Request Body: {requestContent}");

        }
    }
    public class RequestResponseLoggingMiddleware
    {
        private readonly RequestDelegate requestProcess;
        private readonly ILogger _logger;
        private readonly RecyclableMemoryStreamManager _recyclableMemoryStreamManager;


        public RequestResponseLoggingMiddleware(RequestDelegate requestProcess, ILoggerFactory loggerFactory)
        {
            this.requestProcess = requestProcess;
            _logger = loggerFactory.CreateLogger<RequestResponseLoggingMiddleware>();
            _recyclableMemoryStreamManager = new RecyclableMemoryStreamManager();
        }


        public async Task Invoke(HttpContext context)
        {
            await LogRequest(context);
            await LogResponse(context);
        }


        private async Task LogRequest(HttpContext context)
        {
            context.Request.EnableBuffering();
            await using var requestStream = _recyclableMemoryStreamManager.GetStream();
            await context.Request.Body.CopyToAsync(requestStream);
            _logger.LogInformation($"Http Request Information:\n" +
            $"{context.Request.Path}{ReadStreamInChunks(requestStream)}");
            context.Request.Body.Position = 0;
        }


        private static string ReadStreamInChunks(Stream stream)
        {
            const int readChunkBufferLength = 4096;
            stream.Seek(0, SeekOrigin.Begin);
            using var textWriter = new StringWriter();
            using var reader = new StreamReader(stream);
            var readChunk = new char[readChunkBufferLength];
            int readChunkLength;
            do
            {
                readChunkLength = reader.ReadBlock(readChunk, 0, readChunkBufferLength);
                textWriter.Write(readChunk, 0, readChunkLength);
            } while (readChunkLength > 0);
            return textWriter.ToString();
        }


        private async Task LogResponse(HttpContext context)
        {
            var originalBodyStream = context.Response.Body;
            await using var responseBody = _recyclableMemoryStreamManager.GetStream();
            context.Response.Body = responseBody;
            try { 
            await requestProcess(context);
            }
            catch(Exception ex)
            {
                _logger.LogError($"There was an error");
            }
            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var text = await new StreamReader(context.Response.Body).ReadToEndAsync();
            context.Response.Body.Seek(0, SeekOrigin.Begin);
            _logger.LogInformation($"{context.Request.Path}{text}");
            await responseBody.CopyToAsync(originalBodyStream);
        }
    }

}
